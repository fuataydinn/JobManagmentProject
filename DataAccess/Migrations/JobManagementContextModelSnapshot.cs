// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(JobManagementContext))]
    partial class JobManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Yazılım kod geliştirme departmanı",
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Proje analizi, iş analizi ve genel tasarım",
                            Name = "Proje Analiz"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Arayüz ve görsel tasarım departmanı",
                            Name = "Grafik ve Arayüz"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Yöneticiler departmanı",
                            Name = "Yönetim"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FirstName = "Fuat",
                            HireDate = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Aydın",
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FirstName = "Murat",
                            HireDate = new DateTime(2015, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Odabaş",
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FirstName = "Berna",
                            HireDate = new DateTime(2014, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Demir",
                            LeaveDate = new DateTime(2019, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 2,
                            FirstName = "Ali",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Turan",
                            Title = "İş Analisti"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FirstName = "Berker",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Aksoy",
                            LeaveDate = new DateTime(2015, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "İş analisti"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 3,
                            FirstName = "Ayşe",
                            HireDate = new DateTime(2018, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Yıldırım",
                            Title = "Grafik tasarımcı"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 4,
                            FirstName = "Seda",
                            HireDate = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kaya",
                            Title = " Proje Yöneticisi"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 4,
                            FirstName = "Batuhan",
                            HireDate = new DateTime(2011, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Aydın",
                            Title = " Ar-ge yöneticisi"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.MainTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToEmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataAccess.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime2(2)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DataAccess.Models.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("SubTask");
                });

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.HasOne("DataAccess.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataAccess.Models.MainTask", b =>
                {
                    b.HasOne("DataAccess.Models.Employee", "AssignedToEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedToEmployeeId");

                    b.HasOne("DataAccess.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToEmployee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataAccess.Models.SubTask", b =>
                {
                    b.HasOne("DataAccess.Models.MainTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("DataAccess.Models.MainTask", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("DataAccess.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
